{"version":3,"file":"index.js","sources":["../../src/preload/index.ts"],"sourcesContent":["import { contextBridge, ipcRenderer, shell } from 'electron'\nimport { electronAPI } from '@electron-toolkit/preload'\n\n// Custom APIs for renderer\nconst api = {\n  getItems: (): Promise<unknown[]> => ipcRenderer.invoke('getitems'),\n  getItemData: (itemId: number): Promise<unknown[]> => ipcRenderer.invoke('getItemData', itemId),\n  getItemDataDateNow: (): Promise<unknown[]> => ipcRenderer.invoke('getItemDataDateNow'),\n  updateItemPurchased: (itemId: number, purchased: boolean): Promise<{ changes: number }> =>\n    ipcRenderer.invoke('updateItemPurchased', itemId, purchased)\n}\n\nconst eShell = {\n  openExternal: (url: string): Promise<void> => shell.openExternal(url)\n}\n\n// Use `contextBridge` APIs to expose Electron APIs to\n// renderer only if context isolation is enabled, otherwise\n// just add to the DOM global.\nif (process.contextIsolated) {\n  try {\n    contextBridge.exposeInMainWorld('electron', electronAPI)\n    contextBridge.exposeInMainWorld('api', api)\n    contextBridge.exposeInMainWorld('eShell', eShell)\n  } catch (error) {\n    console.error(error)\n  }\n} else {\n  // @ts-ignore (define in dts)\n  window.electron = electronAPI\n  // @ts-ignore (define in dts)\n  window.api = api\n  // @ts-ignore (define in dts)\n  window.shell = eShell\n}\n"],"names":["ipcRenderer","shell","contextBridge","electronAPI"],"mappings":";;;AAIA,MAAM,MAAM;AAAA,EACV,UAAU,MAA0BA,SAAAA,YAAY,OAAO,UAAU;AAAA,EACjE,aAAa,CAAC,WAAuCA,SAAAA,YAAY,OAAO,eAAe,MAAM;AAAA,EAC7F,oBAAoB,MAA0BA,SAAAA,YAAY,OAAO,oBAAoB;AAAA,EACrF,qBAAqB,CAAC,QAAgB,cACpCA,qBAAY,OAAO,uBAAuB,QAAQ,SAAS;AAC/D;AAEA,MAAM,SAAS;AAAA,EACb,cAAc,CAAC,QAA+BC,SAAA,MAAM,aAAa,GAAG;AACtE;AAKA,IAAI,QAAQ,iBAAiB;AACvB,MAAA;AACYC,2BAAA,kBAAkB,YAAYC,mBAAW;AACzCD,2BAAA,kBAAkB,OAAO,GAAG;AAC5BA,2BAAA,kBAAkB,UAAU,MAAM;AAAA,WACzC,OAAO;AACd,YAAQ,MAAM,KAAK;AAAA,EAAA;AAEvB,OAAO;AAEL,SAAO,WAAWC,QAAA;AAElB,SAAO,MAAM;AAEb,SAAO,QAAQ;AACjB;"}