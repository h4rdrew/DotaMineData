{"version":3,"file":"index.js","sources":["../../resources/icon.png?asset","../../src/main/index.ts"],"sourcesContent":["\n          import { join } from 'path'\n          export default join(__dirname, __VITE_NODE_PUBLIC_ASSET__1319cd66__)","import { app, shell, BrowserWindow, ipcMain, session } from 'electron'\nimport path, { join } from 'path'\nimport { electronApp, optimizer, is } from '@electron-toolkit/utils'\nimport icon from '../../resources/icon.png?asset'\nimport Sqlite3 from 'sqlite3'\nimport fs from 'fs'\n\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 900,\n    height: 670,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux' ? { icon } : {}),\n    webPreferences: {\n      preload: join(__dirname, '../preload/index.js'),\n      sandbox: false,\n      webSecurity: false\n    }\n  })\n\n  mainWindow.on('ready-to-show', () => {\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n  } else {\n    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    optimizer.watchWindowShortcuts(window)\n  })\n\n  // IPC test\n  ipcMain.on('ping', () => console.log('pong'))\n\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n\nipcMain.handle('getitems', async () => {\n  return new Promise((resolve, reject) => {\n    const db = new Sqlite3.Database('E:\\\\dotaItemCollectData.db', Sqlite3.OPEN_READONLY)\n\n    db.all('SELECT * FROM Item ORDER BY Name', [], (err, rows) => {\n      if (err) {\n        console.error('Erro ao ler o DB.')\n        reject(err)\n      } else {\n        console.log('Sucesso em ler o DB.')\n        resolve(rows)\n      }\n    })\n    db.close()\n  })\n})\n\nipcMain.handle('getItemData', async (_event, itemId: number) => {\n  return new Promise((resolve, reject) => {\n    const db = new Sqlite3.Database('E:\\\\dotaItemCollectData.db', Sqlite3.OPEN_READONLY)\n\n    db.all(\n      `SELECT\nItemCaptured.DateTime,\nItemCaptured.ExchangeRate,\nItemCaptured.ServiceType,\nCollectData.Price,\nCollectData.ItemId\nFROM CollectData\nINNER JOIN ItemCaptured ON CollectData.CaptureId = ItemCaptured.CaptureId\nWHERE ItemCaptured.DateTime != 0\nAND CollectData.ItemId = ?\nORDER BY date(ItemCaptured.DateTime)\n      `,\n      [`${itemId}`],\n      (err, rows) => {\n        if (err) {\n          console.error('Erro ao ler o DB.')\n          reject(err)\n        } else {\n          console.log('Sucesso em ler o DB.')\n          resolve(rows)\n        }\n      }\n    )\n    db.close()\n  })\n})\n\nipcMain.handle('getItemDataDateNow', async () => {\n  return new Promise((resolve, reject) => {\n    const db = new Sqlite3.Database('E:\\\\dotaItemCollectData.db', Sqlite3.OPEN_READONLY)\n\n    db.all(\n      `WITH UltimoCapture AS (\n    SELECT\n        cd.ItemId,\n        cd.Price,\n        ic.ServiceType,\n        ROW_NUMBER() OVER (\n            PARTITION BY cd.ItemId, ic.ServiceType\n            ORDER BY ic.DateTime DESC\n        ) AS rn\n    FROM CollectData cd\n    JOIN ItemCaptured ic\n        ON cd.CaptureId = ic.CaptureId\n    WHERE ic.DateTime != 0\n      AND ic.ServiceType IN (1, 2)\n)\nSELECT ServiceType, Price, ItemId\nFROM UltimoCapture\nWHERE rn = 1\nORDER BY ItemId, ServiceType;\n      `,\n      [],\n      (err, rows) => {\n        if (err) {\n          console.error('Erro ao ler o DB.')\n          reject(err)\n        } else {\n          console.log('Sucesso em ler o DB.')\n          resolve(rows)\n        }\n      }\n    )\n    db.close()\n  })\n})\n\n// Expor o caminho das imagens\nipcMain.handle('getImagePath', (event, itemId) => {\n  const imagePath = path.join('E:\\\\DotaMine\\\\img', `${itemId}.png`)\n  return fs.existsSync(imagePath) ? `file://${imagePath}` : null\n})\n\n// async function loadDB(): Promise<unknown> {\n//   return new Promise((resolve, reject) => {\n//     const db = new Sqlite3.Database('E:\\\\dotaItemCollectData.db', Sqlite3.OPEN_READONLY)\n\n//     db.all('SELECT * FROM Item', [], (err, rows) => {\n//       if (err) {\n//         console.error('Erro ao ler o DB.')\n//         reject(err)\n//       } else {\n//         console.log('Sucesso em ler o DB.')\n//         resolve(rows)\n//       }\n//     })\n//     db.close()\n//   })\n// }\n\n// ipcMain.handle('get-chart-data', async () => loadDB())\n\n// function loadDB(): void {\n//   ipcMain.handle('get-chart-data', async () => {\n//     return new Promise((resolve, reject) => {\n//       const db = new Sqlite3.Database('E:\\\\dotaItemCollectData.db', Sqlite3.OPEN_READONLY)\n\n//       db.all('SELECT * FROM Item', [], (err, rows) => {\n//         if (err) {\n//           console.error('Erro ao ler o DB.')\n//           reject(err)\n//         } else {\n//           console.log('Sucesso em ler o DB.')\n//           resolve(rows)\n//         }\n//       })\n//       db.close()\n//     })\n//   })\n// }\n"],"names":["join","BrowserWindow","shell","is","app","electronApp","optimizer","ipcMain"],"mappings":"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"}